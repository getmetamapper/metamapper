ALTER SESSION SET "_ORACLE_SCRIPT"=true;

CREATE USER metamapper IDENTIFIED BY pwd4smithj;

GRANT ALL PRIVILEGES TO METAMAPPER;
GRANT SELECT ANY DICTIONARY to metamapper;

/*
 * employees
 */

CREATE USER employees IDENTIFIED BY pwd4smithj;

GRANT CREATE SESSION TO employees;
GRANT CREATE TABLE   TO employees;
GRANT CREATE VIEW    TO employees;

CREATE TABLE employees.employees (
    emp_no NUMBER GENERATED BY DEFAULT AS IDENTITY,
    birth_date DATE NOT NULL,
    first_name VARCHAR2(14) NOT NULL,
    last_name VARCHAR2(16) NOT NULL,
    hire_date DATE NOT NULL,
    created_at TIMESTAMP NOT NULL,
    PRIMARY KEY(emp_no)
);

COMMENT ON COLUMN employees.employees.emp_no IS 'The employee identification number';

CREATE TABLE employees.departments (
    dept_no     VARCHAR2(4)     NOT NULL,
    dept_name   VARCHAR2(40)    NOT NULL UNIQUE,
    started_on  TIMESTAMP        NOT NULL,
    PRIMARY KEY (dept_no)
);

CREATE TABLE employees.dept_manager (
   emp_no       INT             NOT NULL,
   dept_no      VARCHAR2(4)     NOT NULL,
   from_date    DATE            NOT NULL,
   to_date      DATE            NOT NULL,
   extras       VARCHAR2(500),
   rating       INT             DEFAULT 5,
   FOREIGN KEY (emp_no)  REFERENCES employees.employees (emp_no)    ON DELETE CASCADE,
   FOREIGN KEY (dept_no) REFERENCES employees.departments (dept_no) ON DELETE CASCADE,
   PRIMARY KEY (emp_no,dept_no)
);

CREATE TABLE employees.dept_emp (
    emp_no      INT             NOT NULL,
    dept_no     VARCHAR2(4)     NOT NULL,
    from_date   DATE            NOT NULL,
    to_date     DATE            NOT NULL,
    FOREIGN KEY (emp_no)  REFERENCES employees.employees   (emp_no)  ON DELETE CASCADE,
    FOREIGN KEY (dept_no) REFERENCES employees.departments (dept_no) ON DELETE CASCADE,
    PRIMARY KEY (emp_no,dept_no)
);

CREATE TABLE employees.salaries (
    emp_no      INT             NOT NULL,
    salary      INT             NOT NULL,
    from_date   DATE            NOT NULL,
    to_date     DATE            NOT NULL,
    FOREIGN KEY (emp_no) REFERENCES employees.employees (emp_no) ON DELETE CASCADE,
    PRIMARY KEY (emp_no, from_date)
);

CREATE VIEW employees.dept_emp_latest_date AS
SELECT emp_no, MAX(from_date) AS from_date, MAX(to_date) AS to_date
  FROM employees.dept_emp
 GROUP BY emp_no;

CREATE VIEW employees.current_dept_emp AS
SELECT l.emp_no, dept_no, l.from_date, l.to_date
  FROM employees.dept_emp d
  JOIN employees.dept_emp_latest_date l
    ON d.emp_no=l.emp_no AND d.from_date=l.from_date AND l.to_date = d.to_date;

/*
 * orderSystem
 */

CREATE USER orderSystem IDENTIFIED BY pwd4smithj;

GRANT CREATE SESSION TO orderSystem;
GRANT CREATE TABLE   TO orderSystem;
GRANT CREATE VIEW    TO orderSystem;

CREATE TABLE orderSystem.customers (
  customerNumber int NOT NULL,
  customerName VARCHAR2(50) NOT NULL,
  contactLastName VARCHAR2(50) NOT NULL,
  contactFirstName VARCHAR2(50) NOT NULL,
  phone VARCHAR2(50) NOT NULL,
  addressLine1 VARCHAR2(50) NOT NULL,
  addressLine2 VARCHAR2(50) DEFAULT NULL,
  city VARCHAR2(50) NOT NULL,
  state VARCHAR2(50) DEFAULT NULL,
  postalCode VARCHAR2(15) DEFAULT NULL,
  country VARCHAR2(50) NOT NULL,
  salesRepEmployeeNumber int DEFAULT NULL,
  creditLimit decimal(10,2) DEFAULT NULL,
  PRIMARY KEY (customerNumber)
);

CREATE TABLE orderSystem.departments (
  id INT NOT NULL,
  dept_name VARCHAR2(40) NOT NULL,
  PRIMARY KEY(id)
);

CREATE TABLE orderSystem.productLines (
  productLine VARCHAR2(50) NOT NULL,
  textDescription VARCHAR2(4000) DEFAULT NULL,
  htmlDescription VARCHAR2(4000),
  image VARCHAR2(4000),
  PRIMARY KEY (productLine)
);

CREATE TABLE orderSystem.products (
  productCode VARCHAR2(15) NOT NULL,
  productName VARCHAR2(70) NOT NULL,
  productLine VARCHAR2(50) NOT NULL,
  productScale VARCHAR2(10) NOT NULL,
  productVendor VARCHAR2(50) NOT NULL,
  productDescription VARCHAR2(4000) NOT NULL,
  quantityInStock INT NOT NULL,
  buyPrice decimal(10,2) NOT NULL,
  MSRP decimal(10,2) NOT NULL,
  PRIMARY KEY (productCode),
  FOREIGN KEY (productLine) REFERENCES orderSystem.productLines (productLine)
);

CREATE TABLE orderSystem.orders (
  orderNumber INT NOT NULL,
  orderDate DATE NOT NULL,
  requiredDate DATE NOT NULL,
  shippedDate DATE DEFAULT NULL,
  status varchar(15) NOT NULL,
  comments VARCHAR2(4000),
  customerNumber INT NOT NULL,
  PRIMARY KEY (orderNumber),
  FOREIGN KEY (customerNumber) REFERENCES orderSystem.customers (customerNumber)
);

CREATE TABLE orderSystem.orderDetails (
  orderNumber INT NOT NULL,
  productCode VARCHAR2(15) NOT NULL,
  quantityOrdered INT NOT NULL,
  priceEach DECIMAL(10,2) NOT NULL,
  orderLineNumber INT NOT NULL,
  PRIMARY KEY (orderNumber,productCode),
  FOREIGN KEY (orderNumber) REFERENCES orderSystem.orders (orderNumber),
  FOREIGN KEY (productCode) REFERENCES orderSystem.products (productCode)
);

CREATE TABLE orderSystem.payments (
  customerNumber INT NOT NULL,
  checkNumber VARCHAR2(50) NOT NULL,
  paymentDate DATE NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  PRIMARY KEY (customerNumber,checkNumber),
  FOREIGN KEY (customerNumber) REFERENCES orderSystem.customers (customerNumber)
);

GRANT SELECT ON employees.employees TO orderSystem;
CREATE VIEW orderSystem.salesRepresentatives AS
  SELECT d.customerNumber,
         d.customerName,
         d.salesRepEmployeeNumber,
         l.emp_no,
         l.first_name || '' || l.last_name as name
FROM orderSystem.customers d
JOIN employees.employees l
  ON d.salesRepEmployeeNumber = l.emp_no;

/*
 * auth_service
 */

CREATE USER auth_service IDENTIFIED BY pwd4smithj;

GRANT CREATE SESSION TO auth_service;
GRANT CREATE TABLE   TO auth_service;
GRANT CREATE VIEW    TO auth_service;

CREATE TABLE auth_service.privileges (
  id INT NOT NULL,
  privilege_name VARCHAR2(50) NULL,
  PRIMARY KEY (id)
);

GRANT SELECT ON employees.employees TO auth_service;
CREATE TABLE auth_service.employee_privileges (
  employee_id INT NOT NULL,
  privilege_id INT NOT NULL,
  PRIMARY KEY (employee_id, privilege_id)
);

EXIT;
