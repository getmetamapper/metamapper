# Generated by Django 3.0.10 on 2022-03-09 19:03

import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import utils.delete.managers
import utils.encrypt.fields
import utils.mixins.models
import utils.postgres.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('authentication', '0003_workspace_active_sso'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='TableProperty',
            fields=[
                ('id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('value', models.TextField(db_column='property_value')),
            ],
            options={
                'db_table': 'definitions_table_properties',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Column',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('run_id', models.CharField(max_length=255, null=True)),
                ('object_id', models.CharField(db_index=True, max_length=128, unique=True)),
                ('object_ref', models.CharField(db_index=True, max_length=128, null=True)),
                ('name', models.CharField(db_index=True, max_length=256)),
                ('ordinal_position', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('data_type', models.CharField(max_length=255)),
                ('max_length', models.IntegerField(null=True)),
                ('numeric_scale', models.IntegerField(null=True)),
                ('is_primary', models.BooleanField(default=False)),
                ('is_nullable', models.BooleanField()),
                ('default_value', models.CharField(blank=True, max_length=255, null=True)),
                ('db_comment', models.TextField(blank=True, null=True)),
                ('short_desc', models.TextField(blank=True, null=True)),
                ('readme', models.TextField(blank=True, null=True)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=32), default=list, size=None)),
            ],
            bases=(utils.mixins.models.AuditableModel, models.Model),
            managers=[
                ('objects', utils.delete.managers.SoftDeletionManager()),
                ('all_objects', utils.delete.managers.SoftDeletionManager(alive_only=False)),
            ],
        ),
        migrations.CreateModel(
            name='Datastore',
            fields=[
                ('id', models.CharField(db_index=True, editable=False, max_length=40, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('custom_properties', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('name', models.CharField(max_length=255)),
                ('slug', models.CharField(max_length=300)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=32), default=list, size=None)),
                ('is_enabled', models.BooleanField(default=True)),
                ('version', models.CharField(max_length=255, null=True)),
                ('engine', models.CharField(choices=[('postgresql', 'PostgreSQL'), ('sqlserver', 'SQL Server'), ('mysql', 'MySQL'), ('redshift', 'Redshift'), ('snowflake', 'Snowflake'), ('oracle', 'Oracle'), ('bigquery', 'Google BigQuery'), ('athena', 'AWS Athena'), ('glue', 'AWS Glue'), ('azure_sql', 'Azure SQL Database'), ('azure_dwh', 'Azure Synapse'), ('hive', 'Hive Metastore')], max_length=16)),
                ('host', models.CharField(max_length=255)),
                ('username', models.CharField(max_length=128)),
                ('password', utils.encrypt.fields.EncryptedCharField(max_length=128)),
                ('database', models.CharField(max_length=128)),
                ('port', models.PositiveIntegerField(validators=[django.core.validators.MaxValueValidator(65535)])),
                ('extras', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('ssh_enabled', models.BooleanField(default=False)),
                ('ssh_host', models.CharField(max_length=128, null=True)),
                ('ssh_port', models.PositiveIntegerField(null=True, validators=[django.core.validators.MaxValueValidator(65535)])),
                ('ssh_user', models.CharField(max_length=128, null=True)),
                ('short_desc', models.CharField(blank=True, max_length=140, null=True)),
                ('disabled_datastore_properties', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=20), default=list, size=None)),
                ('disabled_table_properties', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=20), default=list, size=None)),
                ('object_permissions_enabled', models.BooleanField(default=True)),
                ('workspace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='datastores', to='authentication.Workspace')),
            ],
            options={
                'permissions': (('change_datastore_metadata', 'Change datastore metadata'), ('change_datastore_settings', 'Change datastore settings'), ('change_datastore_connection', 'Change datastore connection'), ('change_datastore_access', 'Change datastore access'), ('comment_on_datastore', 'Comment on datastore')),
                'unique_together': {('workspace', 'name')},
            },
            bases=(utils.mixins.models.AuditableModel, models.Model),
            managers=[
                ('search_objects', django.db.models.manager.Manager()),
                ('objects', utils.delete.managers.SoftDeletionManager()),
                ('all_objects', utils.delete.managers.SoftDeletionManager(alive_only=False)),
            ],
        ),
        migrations.CreateModel(
            name='Schema',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('run_id', models.CharField(max_length=255, null=True)),
                ('object_id', models.CharField(db_index=True, max_length=128, unique=True)),
                ('object_ref', models.CharField(db_index=True, max_length=128, null=True)),
                ('name', models.CharField(db_index=True, max_length=256)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=32), default=list, size=None)),
                ('datastore', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schemas', to='definitions.Datastore')),
                ('workspace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='authentication.Workspace')),
            ],
            options={
                'unique_together': {('datastore', 'name', 'deleted_at'), ('datastore', 'object_id')},
            },
            bases=(utils.mixins.models.AuditableModel, models.Model),
            managers=[
                ('search_objects', django.db.models.manager.Manager()),
                ('objects', utils.delete.managers.SoftDeletionManager()),
                ('all_objects', utils.delete.managers.SoftDeletionManager(alive_only=False)),
            ],
        ),
        migrations.CreateModel(
            name='Table',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('custom_properties', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('run_id', models.CharField(max_length=255, null=True)),
                ('object_id', models.CharField(db_index=True, max_length=128, unique=True)),
                ('object_ref', models.CharField(db_index=True, max_length=128, null=True)),
                ('name', models.CharField(db_index=True, max_length=256)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=32), default=list, size=None)),
                ('kind', models.CharField(max_length=100)),
                ('db_comment', models.TextField(blank=True, null=True)),
                ('short_desc', models.TextField(blank=True, null=True)),
                ('properties', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('readme', models.TextField(blank=True, null=True)),
                ('schema', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='tables', to='definitions.Schema', to_field='object_id')),
                ('workspace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='authentication.Workspace')),
            ],
            options={
                'unique_together': {('schema', 'object_id'), ('schema', 'name', 'deleted_at')},
            },
            bases=(utils.mixins.models.AuditableModel, models.Model),
            managers=[
                ('search_objects', django.db.models.manager.Manager()),
                ('objects', utils.delete.managers.SoftDeletionManager()),
                ('all_objects', utils.delete.managers.SoftDeletionManager(alive_only=False)),
            ],
        ),
        migrations.AddField(
            model_name='column',
            name='table',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='columns', to='definitions.Table', to_field='object_id'),
        ),
        migrations.AddField(
            model_name='column',
            name='workspace',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='authentication.Workspace'),
        ),
        migrations.AlterUniqueTogether(
            name='column',
            unique_together={('table', 'object_id'), ('table', 'name', 'deleted_at')},
        ),
        migrations.CreateModel(
            name='AssetOwner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(db_index=True, editable=False, verbose_name='order')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('object_id', models.IntegerField()),
                ('owner_id', models.IntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('owner_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='contenttypes.ContentType')),
                ('workspace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='authentication.Workspace')),
            ],
            options={
                'unique_together': {('workspace', 'object_id', 'content_type', 'owner_id', 'owner_type')},
            },
        ),
    ]
