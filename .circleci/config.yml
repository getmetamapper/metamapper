version: 2.1
jobs:
  backend-lint:
    docker:
      - image: circleci/python:3.7.0
    steps:
      - checkout
      - run: sudo pip install flake8 --quiet
      - run: make lint-py
  backend-tests:
    docker:
      - image: circleci/python:3.7.0
        environment:
          METAMAPPER_CELERY_RESULT_BACKEND: "amqp"
      - image: circleci/postgres:9.6
        name: database
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: metamapper
    steps:
      - checkout
      - setup_remote_docker
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.7/site-packages
      - restore_cache:
          key: requirements-{{ .Branch }}-{{ checksum "requirements.txt" }}-{{ checksum "requirements-dev.txt" }}
      - run:
          name: Install Linux dependencies
          command: |
            sudo apt-get update -y && \
            sudo apt-get install -y g++ libxml2-dev libxmlsec1-dev libxmlsec1-openssl
      - run:
          name: Install Python dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install pip-tools==5.3.1 tblib --quiet
            pip-sync requirements.txt requirements-dev.txt
      - save_cache:
          key: requirements-{{ .Branch }}-{{ checksum "requirements.txt" }}-{{ checksum "requirements-dev.txt" }}
          paths:
            - "venv"
      - run:
          name: Wait for database
          command: dockerize -wait tcp://database:5432 -timeout 1m
      - run:
          name: Run database migrations
          command: python manage.py migrate
      - run:
          name: Run test suite
          command: python manage.py test --parallel=4 --exclude-tag=inspector
  backend-inspector-tests:
    environment:
      COMPOSE_PROJECT_NAME: metamapper
    docker:
      - image: circleci/node:12
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Run MySQL inspector tests
          command: COMPOSE_FILE="dev/datastores/mysql/docker-compose.yml" bash .circleci/test-inspector.sh mysql
      - run:
          name: Run PostgreSQL inspector tests
          command: COMPOSE_FILE="dev/datastores/postgresql/docker-compose.yml" bash .circleci/test-inspector.sh postgresql
      - run:
          name: Run Redshift inspector tests
          command: COMPOSE_FILE="dev/datastores/redshift/docker-compose.yml" bash .circleci/test-inspector.sh redshift
      - run:
          name: Run SQL Server inspector tests
          command: COMPOSE_FILE="dev/datastores/sqlserver/docker-compose.yml" bash .circleci/test-inspector.sh sqlserver
  frontend-tests:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - restore_cache:
          key: npm-{{ checksum "./www/package-lock.json" }}
      - run: make install-npm-pkgs
      - save_cache:
          key: npm-{{ checksum "./www/package-lock.json" }}
          paths:
            - ./www/node_modules
      - run: make test-js
  frontend-e2e-tests:
    environment:
      COMPOSE_FILE: .circleci/docker-compose.cypress.yml
      COMPOSE_PROJECT_NAME: cypress
    docker:
      - image: circleci/node:12
    steps:
      - setup_remote_docker
      - checkout
      - run: docker-compose up -d
      - run: |
            docker-compose run --rm worker \
              timeout 60 bash \
                -c 'until $(curl -Isf -o /dev/null http://webserver:5050/); do printf '.'; sleep 0.5; done'
      - run: docker-compose run --rm webserver bash www/cypress/cmd/resetdb.sh
      - run: docker-compose run --rm cypress npx cypress run --spec "www/cypress/integration/*.spec.js" --browser chrome --headless
      - store_artifacts:
          path: .circleci/screenshots
          destination: artifact-file
  build-preview-docker-image:
    docker:
      - image: circleci/node:12
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Publish to Docker Hub
          command: ./bin/docker-publish
workflows:
  pipeline:
    jobs:
      - backend-lint
      - backend-tests:
          requires:
            - backend-lint
      - backend-inspector-tests:
          context: dockerhub
          requires:
            - backend-tests
            - frontend-tests
      - frontend-tests:
          requires:
            - backend-lint
      - frontend-e2e-tests:
          requires:
            - backend-tests
            - frontend-tests
      - build-preview-docker-image:
          context: dockerhub
          requires:
            - backend-tests
            - backend-inspector-tests
            - frontend-tests
            - frontend-e2e-tests
          filters:
            branches:
              only:
                - master
